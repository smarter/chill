/*
Copyright 2012 Twitter, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package com.twitter.chill;

import scala.*;
import java.io.Serializable;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import com.esotericsoftware.kryo.Serializer;

// DO NOT EDIT: auto generated by tuple_serializers.scala at: 2019/09/08 17:18:11 +0200
// scala scripts/tuple_serializers.scala > chill-scala/src/main/java/com/twitter/chill/ScalaTupleSerialization.java

class Tuple1Serializer<A> extends Serializer<Tuple1<A>> implements Serializable {
  public Tuple1Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple1<A> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
  }
  public Tuple1<A> read(Kryo kser, Input in, Class<Tuple1<A>> cls) {
    return new Tuple1<A>(
      (A) kser.readClassAndObject(in)
    );
  }
}
class Tuple2Serializer<A,B> extends Serializer<Tuple2<A,B>> implements Serializable {
  public Tuple2Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple2<A,B> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
  }
  public Tuple2<A,B> read(Kryo kser, Input in, Class<Tuple2<A,B>> cls) {
    return new Tuple2<A,B>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in)
    );
  }
}
class Tuple3Serializer<A,B,C> extends Serializer<Tuple3<A,B,C>> implements Serializable {
  public Tuple3Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple3<A,B,C> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
  }
  public Tuple3<A,B,C> read(Kryo kser, Input in, Class<Tuple3<A,B,C>> cls) {
    return new Tuple3<A,B,C>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in)
    );
  }
}
class Tuple4Serializer<A,B,C,D> extends Serializer<Tuple4<A,B,C,D>> implements Serializable {
  public Tuple4Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple4<A,B,C,D> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
  }
  public Tuple4<A,B,C,D> read(Kryo kser, Input in, Class<Tuple4<A,B,C,D>> cls) {
    return new Tuple4<A,B,C,D>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in)
    );
  }
}
class Tuple5Serializer<A,B,C,D,E> extends Serializer<Tuple5<A,B,C,D,E>> implements Serializable {
  public Tuple5Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple5<A,B,C,D,E> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
  }
  public Tuple5<A,B,C,D,E> read(Kryo kser, Input in, Class<Tuple5<A,B,C,D,E>> cls) {
    return new Tuple5<A,B,C,D,E>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in)
    );
  }
}
class Tuple6Serializer<A,B,C,D,E,F> extends Serializer<Tuple6<A,B,C,D,E,F>> implements Serializable {
  public Tuple6Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple6<A,B,C,D,E,F> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
  }
  public Tuple6<A,B,C,D,E,F> read(Kryo kser, Input in, Class<Tuple6<A,B,C,D,E,F>> cls) {
    return new Tuple6<A,B,C,D,E,F>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in)
    );
  }
}
class Tuple7Serializer<A,B,C,D,E,F,G> extends Serializer<Tuple7<A,B,C,D,E,F,G>> implements Serializable {
  public Tuple7Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple7<A,B,C,D,E,F,G> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
  }
  public Tuple7<A,B,C,D,E,F,G> read(Kryo kser, Input in, Class<Tuple7<A,B,C,D,E,F,G>> cls) {
    return new Tuple7<A,B,C,D,E,F,G>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in)
    );
  }
}
class Tuple8Serializer<A,B,C,D,E,F,G,H> extends Serializer<Tuple8<A,B,C,D,E,F,G,H>> implements Serializable {
  public Tuple8Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple8<A,B,C,D,E,F,G,H> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
  }
  public Tuple8<A,B,C,D,E,F,G,H> read(Kryo kser, Input in, Class<Tuple8<A,B,C,D,E,F,G,H>> cls) {
    return new Tuple8<A,B,C,D,E,F,G,H>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in)
    );
  }
}
class Tuple9Serializer<A,B,C,D,E,F,G,H,I> extends Serializer<Tuple9<A,B,C,D,E,F,G,H,I>> implements Serializable {
  public Tuple9Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple9<A,B,C,D,E,F,G,H,I> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
  }
  public Tuple9<A,B,C,D,E,F,G,H,I> read(Kryo kser, Input in, Class<Tuple9<A,B,C,D,E,F,G,H,I>> cls) {
    return new Tuple9<A,B,C,D,E,F,G,H,I>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in)
    );
  }
}
class Tuple10Serializer<A,B,C,D,E,F,G,H,I,J> extends Serializer<Tuple10<A,B,C,D,E,F,G,H,I,J>> implements Serializable {
  public Tuple10Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple10<A,B,C,D,E,F,G,H,I,J> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
  }
  public Tuple10<A,B,C,D,E,F,G,H,I,J> read(Kryo kser, Input in, Class<Tuple10<A,B,C,D,E,F,G,H,I,J>> cls) {
    return new Tuple10<A,B,C,D,E,F,G,H,I,J>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in)
    );
  }
}
class Tuple11Serializer<A,B,C,D,E,F,G,H,I,J,K> extends Serializer<Tuple11<A,B,C,D,E,F,G,H,I,J,K>> implements Serializable {
  public Tuple11Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple11<A,B,C,D,E,F,G,H,I,J,K> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
  }
  public Tuple11<A,B,C,D,E,F,G,H,I,J,K> read(Kryo kser, Input in, Class<Tuple11<A,B,C,D,E,F,G,H,I,J,K>> cls) {
    return new Tuple11<A,B,C,D,E,F,G,H,I,J,K>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in)
    );
  }
}
class Tuple12Serializer<A,B,C,D,E,F,G,H,I,J,K,L> extends Serializer<Tuple12<A,B,C,D,E,F,G,H,I,J,K,L>> implements Serializable {
  public Tuple12Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple12<A,B,C,D,E,F,G,H,I,J,K,L> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
  }
  public Tuple12<A,B,C,D,E,F,G,H,I,J,K,L> read(Kryo kser, Input in, Class<Tuple12<A,B,C,D,E,F,G,H,I,J,K,L>> cls) {
    return new Tuple12<A,B,C,D,E,F,G,H,I,J,K,L>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in)
    );
  }
}
class Tuple13Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M> extends Serializer<Tuple13<A,B,C,D,E,F,G,H,I,J,K,L,M>> implements Serializable {
  public Tuple13Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple13<A,B,C,D,E,F,G,H,I,J,K,L,M> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
  }
  public Tuple13<A,B,C,D,E,F,G,H,I,J,K,L,M> read(Kryo kser, Input in, Class<Tuple13<A,B,C,D,E,F,G,H,I,J,K,L,M>> cls) {
    return new Tuple13<A,B,C,D,E,F,G,H,I,J,K,L,M>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in)
    );
  }
}
class Tuple14Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N> extends Serializer<Tuple14<A,B,C,D,E,F,G,H,I,J,K,L,M,N>> implements Serializable {
  public Tuple14Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple14<A,B,C,D,E,F,G,H,I,J,K,L,M,N> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
  }
  public Tuple14<A,B,C,D,E,F,G,H,I,J,K,L,M,N> read(Kryo kser, Input in, Class<Tuple14<A,B,C,D,E,F,G,H,I,J,K,L,M,N>> cls) {
    return new Tuple14<A,B,C,D,E,F,G,H,I,J,K,L,M,N>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in)
    );
  }
}
class Tuple15Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O> extends Serializer<Tuple15<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O>> implements Serializable {
  public Tuple15Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple15<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
  }
  public Tuple15<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O> read(Kryo kser, Input in, Class<Tuple15<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O>> cls) {
    return new Tuple15<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in)
    );
  }
}
class Tuple16Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P> extends Serializer<Tuple16<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P>> implements Serializable {
  public Tuple16Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple16<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
  }
  public Tuple16<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P> read(Kryo kser, Input in, Class<Tuple16<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P>> cls) {
    return new Tuple16<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in)
    );
  }
}
class Tuple17Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q> extends Serializer<Tuple17<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q>> implements Serializable {
  public Tuple17Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple17<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
  }
  public Tuple17<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q> read(Kryo kser, Input in, Class<Tuple17<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q>> cls) {
    return new Tuple17<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in)
    );
  }
}
class Tuple18Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R> extends Serializer<Tuple18<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R>> implements Serializable {
  public Tuple18Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple18<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
    kser.writeClassAndObject(out, obj._18()); out.flush();
  }
  public Tuple18<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R> read(Kryo kser, Input in, Class<Tuple18<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R>> cls) {
    return new Tuple18<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in),
      (R) kser.readClassAndObject(in)
    );
  }
}
class Tuple19Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S> extends Serializer<Tuple19<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S>> implements Serializable {
  public Tuple19Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple19<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
    kser.writeClassAndObject(out, obj._18()); out.flush();
    kser.writeClassAndObject(out, obj._19()); out.flush();
  }
  public Tuple19<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S> read(Kryo kser, Input in, Class<Tuple19<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S>> cls) {
    return new Tuple19<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in),
      (R) kser.readClassAndObject(in),
      (S) kser.readClassAndObject(in)
    );
  }
}
class Tuple20Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T> extends Serializer<Tuple20<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T>> implements Serializable {
  public Tuple20Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple20<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
    kser.writeClassAndObject(out, obj._18()); out.flush();
    kser.writeClassAndObject(out, obj._19()); out.flush();
    kser.writeClassAndObject(out, obj._20()); out.flush();
  }
  public Tuple20<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T> read(Kryo kser, Input in, Class<Tuple20<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T>> cls) {
    return new Tuple20<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in),
      (R) kser.readClassAndObject(in),
      (S) kser.readClassAndObject(in),
      (T) kser.readClassAndObject(in)
    );
  }
}
class Tuple21Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U> extends Serializer<Tuple21<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U>> implements Serializable {
  public Tuple21Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple21<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
    kser.writeClassAndObject(out, obj._18()); out.flush();
    kser.writeClassAndObject(out, obj._19()); out.flush();
    kser.writeClassAndObject(out, obj._20()); out.flush();
    kser.writeClassAndObject(out, obj._21()); out.flush();
  }
  public Tuple21<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U> read(Kryo kser, Input in, Class<Tuple21<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U>> cls) {
    return new Tuple21<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in),
      (R) kser.readClassAndObject(in),
      (S) kser.readClassAndObject(in),
      (T) kser.readClassAndObject(in),
      (U) kser.readClassAndObject(in)
    );
  }
}
class Tuple22Serializer<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V> extends Serializer<Tuple22<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V>> implements Serializable {
  public Tuple22Serializer() {
    setImmutable(true);
  }
  public void write(Kryo kser, Output out, Tuple22<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V> obj) {
    kser.writeClassAndObject(out, obj._1()); out.flush();
    kser.writeClassAndObject(out, obj._2()); out.flush();
    kser.writeClassAndObject(out, obj._3()); out.flush();
    kser.writeClassAndObject(out, obj._4()); out.flush();
    kser.writeClassAndObject(out, obj._5()); out.flush();
    kser.writeClassAndObject(out, obj._6()); out.flush();
    kser.writeClassAndObject(out, obj._7()); out.flush();
    kser.writeClassAndObject(out, obj._8()); out.flush();
    kser.writeClassAndObject(out, obj._9()); out.flush();
    kser.writeClassAndObject(out, obj._10()); out.flush();
    kser.writeClassAndObject(out, obj._11()); out.flush();
    kser.writeClassAndObject(out, obj._12()); out.flush();
    kser.writeClassAndObject(out, obj._13()); out.flush();
    kser.writeClassAndObject(out, obj._14()); out.flush();
    kser.writeClassAndObject(out, obj._15()); out.flush();
    kser.writeClassAndObject(out, obj._16()); out.flush();
    kser.writeClassAndObject(out, obj._17()); out.flush();
    kser.writeClassAndObject(out, obj._18()); out.flush();
    kser.writeClassAndObject(out, obj._19()); out.flush();
    kser.writeClassAndObject(out, obj._20()); out.flush();
    kser.writeClassAndObject(out, obj._21()); out.flush();
    kser.writeClassAndObject(out, obj._22()); out.flush();
  }
  public Tuple22<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V> read(Kryo kser, Input in, Class<Tuple22<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V>> cls) {
    return new Tuple22<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V>(
      (A) kser.readClassAndObject(in),
      (B) kser.readClassAndObject(in),
      (C) kser.readClassAndObject(in),
      (D) kser.readClassAndObject(in),
      (E) kser.readClassAndObject(in),
      (F) kser.readClassAndObject(in),
      (G) kser.readClassAndObject(in),
      (H) kser.readClassAndObject(in),
      (I) kser.readClassAndObject(in),
      (J) kser.readClassAndObject(in),
      (K) kser.readClassAndObject(in),
      (L) kser.readClassAndObject(in),
      (M) kser.readClassAndObject(in),
      (N) kser.readClassAndObject(in),
      (O) kser.readClassAndObject(in),
      (P) kser.readClassAndObject(in),
      (Q) kser.readClassAndObject(in),
      (R) kser.readClassAndObject(in),
      (S) kser.readClassAndObject(in),
      (T) kser.readClassAndObject(in),
      (U) kser.readClassAndObject(in),
      (V) kser.readClassAndObject(in)
    );
  }
}

class Tuple1LongSerializer extends Serializer<Tuple1$mcJ$sp> implements Serializable {
  public Tuple1LongSerializer() {
    setImmutable(true);
  }
  public Tuple1$mcJ$sp read(Kryo kser, Input in, Class<Tuple1$mcJ$sp> cls) {
    return new Tuple1$mcJ$sp(in.readLong());
  }
  public void write(Kryo kser, Output out, Tuple1$mcJ$sp tup) {
    out.writeLong(tup._1$mcJ$sp);
  }
}



class Tuple1IntSerializer extends Serializer<Tuple1$mcI$sp> implements Serializable {
  public Tuple1IntSerializer() {
    setImmutable(true);
  }
  public Tuple1$mcI$sp read(Kryo kser, Input in, Class<Tuple1$mcI$sp> cls) {
    return new Tuple1$mcI$sp(in.readInt());
  }
  public void write(Kryo kser, Output out, Tuple1$mcI$sp tup) {
    out.writeInt(tup._1$mcI$sp);
  }
}



class Tuple1DoubleSerializer extends Serializer<Tuple1$mcD$sp> implements Serializable {
  public Tuple1DoubleSerializer() {
    setImmutable(true);
  }
  public Tuple1$mcD$sp read(Kryo kser, Input in, Class<Tuple1$mcD$sp> cls) {
    return new Tuple1$mcD$sp(in.readDouble());
  }
  public void write(Kryo kser, Output out, Tuple1$mcD$sp tup) {
    out.writeDouble(tup._1$mcD$sp);
  }
}



class Tuple2LongLongSerializer extends Serializer<Tuple2$mcJJ$sp> implements Serializable {
  public Tuple2LongLongSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcJJ$sp read(Kryo kser, Input in, Class<Tuple2$mcJJ$sp> cls) {
    return new Tuple2$mcJJ$sp(in.readLong(), in.readLong());
  }
  public void write(Kryo kser, Output out, Tuple2$mcJJ$sp tup) {
    out.writeLong(tup._1$mcJ$sp);
    out.writeLong(tup._2$mcJ$sp);
  }
}


class Tuple2LongIntSerializer extends Serializer<Tuple2$mcJI$sp> implements Serializable {
  public Tuple2LongIntSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcJI$sp read(Kryo kser, Input in, Class<Tuple2$mcJI$sp> cls) {
    return new Tuple2$mcJI$sp(in.readLong(), in.readInt());
  }
  public void write(Kryo kser, Output out, Tuple2$mcJI$sp tup) {
    out.writeLong(tup._1$mcJ$sp);
    out.writeInt(tup._2$mcI$sp);
  }
}


class Tuple2LongDoubleSerializer extends Serializer<Tuple2$mcJD$sp> implements Serializable {
  public Tuple2LongDoubleSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcJD$sp read(Kryo kser, Input in, Class<Tuple2$mcJD$sp> cls) {
    return new Tuple2$mcJD$sp(in.readLong(), in.readDouble());
  }
  public void write(Kryo kser, Output out, Tuple2$mcJD$sp tup) {
    out.writeLong(tup._1$mcJ$sp);
    out.writeDouble(tup._2$mcD$sp);
  }
}


class Tuple2IntLongSerializer extends Serializer<Tuple2$mcIJ$sp> implements Serializable {
  public Tuple2IntLongSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcIJ$sp read(Kryo kser, Input in, Class<Tuple2$mcIJ$sp> cls) {
    return new Tuple2$mcIJ$sp(in.readInt(), in.readLong());
  }
  public void write(Kryo kser, Output out, Tuple2$mcIJ$sp tup) {
    out.writeInt(tup._1$mcI$sp);
    out.writeLong(tup._2$mcJ$sp);
  }
}


class Tuple2IntIntSerializer extends Serializer<Tuple2$mcII$sp> implements Serializable {
  public Tuple2IntIntSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcII$sp read(Kryo kser, Input in, Class<Tuple2$mcII$sp> cls) {
    return new Tuple2$mcII$sp(in.readInt(), in.readInt());
  }
  public void write(Kryo kser, Output out, Tuple2$mcII$sp tup) {
    out.writeInt(tup._1$mcI$sp);
    out.writeInt(tup._2$mcI$sp);
  }
}


class Tuple2IntDoubleSerializer extends Serializer<Tuple2$mcID$sp> implements Serializable {
  public Tuple2IntDoubleSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcID$sp read(Kryo kser, Input in, Class<Tuple2$mcID$sp> cls) {
    return new Tuple2$mcID$sp(in.readInt(), in.readDouble());
  }
  public void write(Kryo kser, Output out, Tuple2$mcID$sp tup) {
    out.writeInt(tup._1$mcI$sp);
    out.writeDouble(tup._2$mcD$sp);
  }
}


class Tuple2DoubleLongSerializer extends Serializer<Tuple2$mcDJ$sp> implements Serializable {
  public Tuple2DoubleLongSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcDJ$sp read(Kryo kser, Input in, Class<Tuple2$mcDJ$sp> cls) {
    return new Tuple2$mcDJ$sp(in.readDouble(), in.readLong());
  }
  public void write(Kryo kser, Output out, Tuple2$mcDJ$sp tup) {
    out.writeDouble(tup._1$mcD$sp);
    out.writeLong(tup._2$mcJ$sp);
  }
}


class Tuple2DoubleIntSerializer extends Serializer<Tuple2$mcDI$sp> implements Serializable {
  public Tuple2DoubleIntSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcDI$sp read(Kryo kser, Input in, Class<Tuple2$mcDI$sp> cls) {
    return new Tuple2$mcDI$sp(in.readDouble(), in.readInt());
  }
  public void write(Kryo kser, Output out, Tuple2$mcDI$sp tup) {
    out.writeDouble(tup._1$mcD$sp);
    out.writeInt(tup._2$mcI$sp);
  }
}


class Tuple2DoubleDoubleSerializer extends Serializer<Tuple2$mcDD$sp> implements Serializable {
  public Tuple2DoubleDoubleSerializer() {
    setImmutable(true);
  }
  public Tuple2$mcDD$sp read(Kryo kser, Input in, Class<Tuple2$mcDD$sp> cls) {
    return new Tuple2$mcDD$sp(in.readDouble(), in.readDouble());
  }
  public void write(Kryo kser, Output out, Tuple2$mcDD$sp tup) {
    out.writeDouble(tup._1$mcD$sp);
    out.writeDouble(tup._2$mcD$sp);
  }
}

public class ScalaTupleSerialization implements Serializable {
  public static IKryoRegistrar register() { return new IKryoRegistrar() {
    public void apply(Kryo newK) {

    newK.register(Tuple1.class, new Tuple1Serializer<Object>());
    newK.register(Tuple2.class, new Tuple2Serializer<Object,Object>());
    newK.register(Tuple3.class, new Tuple3Serializer<Object,Object,Object>());
    newK.register(Tuple4.class, new Tuple4Serializer<Object,Object,Object,Object>());
    newK.register(Tuple5.class, new Tuple5Serializer<Object,Object,Object,Object,Object>());
    newK.register(Tuple6.class, new Tuple6Serializer<Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple7.class, new Tuple7Serializer<Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple8.class, new Tuple8Serializer<Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple9.class, new Tuple9Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple10.class, new Tuple10Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple11.class, new Tuple11Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple12.class, new Tuple12Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple13.class, new Tuple13Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple14.class, new Tuple14Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple15.class, new Tuple15Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple16.class, new Tuple16Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple17.class, new Tuple17Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple18.class, new Tuple18Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple19.class, new Tuple19Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple20.class, new Tuple20Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple21.class, new Tuple21Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple22.class, new Tuple22Serializer<Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object>());
    newK.register(Tuple1$mcJ$sp.class, new Tuple1LongSerializer());
    newK.register(Tuple1$mcI$sp.class, new Tuple1IntSerializer());
    newK.register(Tuple1$mcD$sp.class, new Tuple1DoubleSerializer());
    newK.register(Tuple2$mcJJ$sp.class, new Tuple2LongLongSerializer());
    newK.register(Tuple2$mcJI$sp.class, new Tuple2LongIntSerializer());
    newK.register(Tuple2$mcJD$sp.class, new Tuple2LongDoubleSerializer());
    newK.register(Tuple2$mcIJ$sp.class, new Tuple2IntLongSerializer());
    newK.register(Tuple2$mcII$sp.class, new Tuple2IntIntSerializer());
    newK.register(Tuple2$mcID$sp.class, new Tuple2IntDoubleSerializer());
    newK.register(Tuple2$mcDJ$sp.class, new Tuple2DoubleLongSerializer());
    newK.register(Tuple2$mcDI$sp.class, new Tuple2DoubleIntSerializer());
    newK.register(Tuple2$mcDD$sp.class, new Tuple2DoubleDoubleSerializer());
    }
  }; }
}
